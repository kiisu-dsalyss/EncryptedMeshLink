# Raspberry Pi deployment Dockerfile
# Optimized for ARM architecture and low memory

FROM node:23-alpine AS installer

# Install git, bash, udev tools, and coreutils for auto-updates and hardware detection
RUN apk add --no-cache git bash udev coreutils

# Set working directory
WORKDIR /app

# Copy package files and npm configuration
COPY package*.json .npmrc ./

# Install dependencies with optimizations for ARM/Pi
# Install all dependencies first (needed for tsx), then clean up dev deps
RUN npm install --no-audit --no-fund \
    && npm prune --production \
    && npm cache clean --force

# Copy configuration template
COPY encryptedmeshlink-config.template.json ./

# Copy the rest of the source code
COPY . .

# Make entrypoint script executable
RUN chmod +x docker-entrypoint.sh

# Create A/B deployment structure
RUN mkdir -p /app/deployment/staging /app/deployment/production /app/deployment/backup

# Expose port
EXPOSE 3000

# Health check with longer timeout for Pi
HEALTHCHECK --interval=60s --timeout=30s --start-period=10s --retries=2 \
    CMD npx tsx encryptedmeshlink.ts --health-check || exit 1

# Set entrypoint
ENTRYPOINT ["./docker-entrypoint.sh"]

# Default command with memory optimization
CMD ["npx", "tsx", "encryptedmeshlink.ts"]
