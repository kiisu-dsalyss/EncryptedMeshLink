version: '3.8'

services:
  # Discovery Service (PHP)
  discovery:
    build:
      context: .
      dockerfile: Dockerfile.discovery
    ports:
      - "8080:80"
    volumes:
      - discovery_data:/var/www/html/data
      - ./discovery.php:/var/www/html/discovery.php
    environment:
      - PHP_ENV=development
      - DEBUG=true
    networks:
      - mesh-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/discovery.php?health=true"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Station A (Mobile Van Simulation)
  station-a:
    build:
      context: .
      dockerfile: Dockerfile.station
    environment:
      - NODE_ENV=development
      - STATION_ID=mobile-van-001
      - STATION_NAME=Mobile Van Simulator
      - DISCOVERY_SERVER=http://discovery/discovery.php
      - LOCAL_PORT=8081
      - POLL_INTERVAL_MS=15000
      - NETWORK_TIMEOUT_MS=30000
      - DEBUG=true
    volumes:
      - station_a_config:/app/config
      - station_a_keys:/app/keys
      - station_a_data:/app/data
      - station_a_logs:/app/logs
      - ./src:/app/src:ro  # Read-only mount for development
    depends_on:
      - discovery
    networks:
      - mesh-dev-network
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD", "node", "/app/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Station B (Base Station Simulation)
  station-b:
    build:
      context: .
      dockerfile: Dockerfile.station
    environment:
      - NODE_ENV=development
      - STATION_ID=base-station-001
      - STATION_NAME=Base Station Simulator
      - DISCOVERY_SERVER=http://discovery/discovery.php
      - LOCAL_PORT=8082
      - POLL_INTERVAL_MS=15000
      - NETWORK_TIMEOUT_MS=30000
      - DEBUG=true
    volumes:
      - station_b_config:/app/config
      - station_b_keys:/app/keys
      - station_b_data:/app/data
      - station_b_logs:/app/logs
      - ./src:/app/src:ro  # Read-only mount for development
    depends_on:
      - discovery
    networks:
      - mesh-dev-network
    ports:
      - "8082:8082"
    healthcheck:
      test: ["CMD", "node", "/app/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Meshtastic Device Simulator
  mesh-simulator:
    build:
      context: .
      dockerfile: Dockerfile.simulator
    environment:
      - SIMULATE_NODES=5
      - MESH_NETWORK_SIZE=large
      - MESSAGE_FREQUENCY=medium
      - NODE_MOBILITY=enabled
      - DEBUG=true
    volumes:
      - simulator_data:/app/data
      - simulator_logs:/app/logs
    networks:
      - mesh-dev-network
    ports:
      - "8083:8083"  # Simulator web interface

  # Development Tools Container
  dev-tools:
    build:
      context: .
      dockerfile: Dockerfile.dev-tools
    environment:
      - NODE_ENV=development
    volumes:
      - ./:/workspace
      - dev_tools_data:/app/data
    networks:
      - mesh-dev-network
    ports:
      - "8084:8084"  # Development dashboard
    profiles:
      - tools
    command: ["npm", "run", "dev-dashboard"]

  # Network Monitor (for testing network conditions)
  network-monitor:
    image: nicolaka/netshoot
    networks:
      - mesh-dev-network
    volumes:
      - ./scripts:/scripts
    profiles:
      - debug
    command: ["sleep", "infinity"]

volumes:
  discovery_data:
    driver: local
  station_a_config:
    driver: local
  station_a_keys:
    driver: local
  station_a_data:
    driver: local
  station_a_logs:
    driver: local
  station_b_config:
    driver: local
  station_b_keys:
    driver: local
  station_b_data:
    driver: local
  station_b_logs:
    driver: local
  simulator_data:
    driver: local
  simulator_logs:
    driver: local
  dev_tools_data:
    driver: local

networks:
  mesh-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: mesh-dev-br
